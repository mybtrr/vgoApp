package com.gdswww.library.activity;import android.annotation.SuppressLint;import android.app.Activity;import android.app.ProgressDialog;import android.content.ActivityNotFoundException;import android.content.Context;import android.content.Intent;import android.content.res.Resources;import android.content.res.Resources.NotFoundException;import android.os.Bundle;import android.os.Message;import android.support.v4.app.FragmentActivity;import android.util.Log;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.inputmethod.InputMethodManager;import android.widget.EditText;import android.widget.Toast;import com.androidquery.AQuery;import com.gdswww.library.dialog.AppProgressDialog;/** * @ClassName: GDSBaseActivity * @Description: Activity基类 * @author shihuanzhang 2335946896@qq_com */public abstract class GDSBaseActivity extends FragmentActivity {	public BaseHandler handler;	protected String TAG;	public AQuery aq;	protected AppProgressDialog pd;	public Resources res;	public Context context;	public LayoutInflater inflater;	protected Toast toast;	/**	 * 子类可重写该方法，创建自己的ProgressDialog对象 默认为系统默认的ProgressDialog	 */	protected void createProgressDialog() {		if (pd == null) {			pd = new AppProgressDialog(this);			pd.setCanceledOnTouchOutside(false);			pd.getWindow().setGravity(Gravity.CENTER);		}	}	public void showProgressDialog(String message, boolean isCancelable) {		createProgressDialog();		pd.setCancelable(isCancelable);		pd.setMessage(message);		pd.show();	}	public void dimissProgressDialog() {		if (pd != null && pd.isShowing()) {			pd.dismiss();		}	}	public ProgressDialog getProgessDialog(String message, boolean isCancel) {		createProgressDialog();		pd.setCancelable(isCancel);		pd.setMessage(message);		return pd;	}	public Intent getIntent(Class<? extends Activity> c) {		return new Intent(getApplicationContext(), c);	}	public void goActivity(Class<? extends Activity> cls) {		try {			startActivity(getIntent(cls));		} catch (ActivityNotFoundException e) {			// TODO Auto-generated catch block			eLogs(cls.getName() + " Not Found!");		}	}	/**	 * startActivityFinish 启动新的 Activity并且finish当前的Activity	 */	public void goActivityFinish(Class<? extends Activity> cls) {		goActivity(cls);		finish();	}	public void goActivity(Intent intent) {		try {			startActivity(intent);		} catch (ActivityNotFoundException e) {			// TODO Auto-generated catch block			eLogs(intent.getClass().getName() + " Not Found!");		}	}	public void goActivityFinish(Intent intent) {		startActivity(intent);		finish();	}	public abstract void updateUI(Message msg);	public abstract void initUI();	public abstract void regUIEvent();	/**	 * 返回一个布局文件的id	 */	public abstract int getLayout();	/**	 * 如果在onCreate还有别的参数需要初始化，则重写该方法	 */	public void onCreateBefore(Bundle savedInstanceState) {	};	@Override	protected void onCreate(Bundle savedInstanceState) {		// TODO Auto-generated method stub		super.onCreate(savedInstanceState);		onCreateBefore(savedInstanceState);		TAG = getClass().getName();		aq = new AQuery(this);		context = getApplicationContext();		res = getResources();		inflater = getLayoutInflater();		if (getLayout() != 0) {			setContentView(getLayout());		}		initUI();		regUIEvent();	}	/**	 * 创建handler	 * 	 * @param methodName	 *            处理方法 public void methodName(Message.class);	 */	public void handler(String methodName) {		if (handler == null) {			handler = new BaseHandler(this, methodName);		}	}	@Deprecated	public void handler() {		if (handler == null) {			handler = new BaseHandler(this, "updateUI");		}	}	/**	 * 打印错误日志 返回类型：void	 */	public void eLogs(String message) {		if (message != null) {			Log.e(TAG, message);		}	}	/**	 * 打印信息日志 返回类型：void	 */	public void iLogs(String message) {		if (message != null) {			Log.i(TAG, message);		}	}	public void wLogs(String message) {		if (message != null) {			Log.w(TAG, message);		}	}	public void dLogs(String message) {		if (message != null) {			Log.d(TAG, message);		}	}	/**	 * 从resources获取到字符串	 * 	 * @param stringId	 *            资源stringId	 * @return	 */	public String string(int stringId) {		String str = "";		try {			str = getResources().getString(stringId);		} catch (NotFoundException e) {			// TODO Auto-generated catch block			e.printStackTrace();			str = "";		}		return str;	}	/**	 * 从resources获取颜色值	 * 	 * @param colorId	 *            资源colorId	 * @return	 */	public int color(int colorId) {		int color = -1;		try {			color = getResources().getColor(colorId);		} catch (NotFoundException e) {			// TODO Auto-generated catch block			e.printStackTrace();			color = -1;		}		return color;	}	/**	 * 视图设置文本	 * 	 * @param viewId	 * @param text	 */	public void setText(int viewId, String text) {		aq.id(viewId).text(text);	}	public void setText(int viewId, int stringRes) {		aq.id(viewId).text(stringRes);	}	/**	 * 获取editText的字符串	 * 	 * @param e	 * @return	 */	public String getEditTextString(EditText e) {		String str = "";		str = (e == null ? "" : e.getText().toString().trim());		return str;	}	public void hideView(View v) {		aq.id(v).visibility(View.GONE);	}	public void hideView(int viewid) {		aq.id(viewid).visibility(View.GONE);	}	public void hideViewHasSpace(View v) {		aq.id(v).visibility(View.INVISIBLE);	}	public void hideViewHasSpace(int viewid) {		aq.id(viewid).visibility(View.INVISIBLE);	}	public void showView(View v) {		aq.id(v).visibility(View.VISIBLE);	}	public void showView(int viewid) {		aq.id(viewid).visibility(View.VISIBLE);	}	public void enableView(View v, boolean isEnable) {		aq.id(v).enabled(isEnable);	}	public void enableView(int viewid, boolean isEnable) {		aq.id(viewid).enabled(isEnable);	}	/**	 * 使用toastShort 代替	 * 	 * @param s	 */	@Deprecated	public void shortToast(String s) {	}	/**	 * 显示Toast	 * 	 * @param s	 */	public void toastShort(String s) {		createToast();		toast.setDuration(Toast.LENGTH_SHORT);		showToast(s);	}	/**	 * 使用toastLong 代替	 * 	 * @param s	 */	@Deprecated	public void longToast(String s) {	}	public void toastLong(String s) {		createToast();		toast.setDuration(Toast.LENGTH_LONG);		showToast(s);	}	@SuppressLint("ShowToast")	private void createToast() {		if (toast == null) {			toast = Toast.makeText(getApplicationContext(), "",					Toast.LENGTH_SHORT);		}	}	private void showToast(String s) {		toast.setText(s);		toast.show();	}	/**	 * @Description: 为视图添加点击事件	 * @param viewId	 *            视图id	 * @param methodName	 *            方法名 ，此类公开的方法 example: public void methodName(View view){}	 */	public void clickView(int viewId, String methodName) {		aq.id(viewId).clicked(this, methodName);	}	public void clickView(View view, String methodName) {		aq.id(view).clicked(this, methodName);	}	/**	 * 为视图注册点击事件	 * 	 * @param viewId	 *            视图viewid	 * @param listener	 *            监听器	 */	public void clickView(int viewId, OnClickListener listener) {		aq.id(viewId).clicked(listener);	}	public void clickView(View view, OnClickListener listener) {		aq.id(view).clicked(listener);	}	/**	 * 打开软键盘	 * 	 * @param et	 *            输入框	 * @param context上下文	 */	public void openKeyboard(EditText et, Context context) {		InputMethodManager imm = (InputMethodManager) SystemService(Context.INPUT_METHOD_SERVICE);		imm.showSoftInput(et, InputMethodManager.RESULT_SHOWN);		imm.toggleSoftInput(InputMethodManager.SHOW_FORCED,				InputMethodManager.HIDE_IMPLICIT_ONLY);	}	/**	 * 关闭软键盘	 * 	 * @param et输入框	 * @param context上下文	 */	public void closeKeyboard(EditText et, Context context) {		InputMethodManager imm = (InputMethodManager) SystemService(Context.INPUT_METHOD_SERVICE);		imm.hideSoftInputFromWindow(et.getWindowToken(), 0);	}	/**	 * 获取系统服务	 * 	 * @param systemServiceName	 *            系统服务名字	 * @return	 */	public Object SystemService(String systemServiceName) {		return context.getSystemService(systemServiceName);	}	@SuppressWarnings("unchecked")	/**	 *可以代替findViewById方法功能	 * @param viewId	 * @return	 */	public <T extends View> T viewId(int viewId) {		return (T) findViewById(viewId);	}	public void goSwipeActivity(Class<? extends FragmentActivity> cls) {		try {			startActivity(getIntent(cls));		} catch (ActivityNotFoundException e) {			// TODO Auto-generated catch block			eLogs(cls.getName() + " Not Found!");		}	}		public void back(View v) {		finish();	}}